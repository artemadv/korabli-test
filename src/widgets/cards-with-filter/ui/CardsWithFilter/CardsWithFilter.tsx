import { FC, useEffect, useState } from 'react';
import clsx from 'clsx';

import { Button, Col, Container, Row } from '../../../../shared/ui';
import { GetVehiclesQuery, useGetVehiclesQuery } from '../../../../shared/api';
import { CardVehicle, SkeletonCardVehicle } from '../../../../entities/vehicle';
import { useShowMore } from '../../../../features/show-more';
import { Filter, Filters, useFilterParams } from '../../../../features/filter';

import styles from './CardsWithFilter.module.css';

const COUNT_OF_VIEW_CARDS = 6;

type VehiclesList = Exclude<GetVehiclesQuery['vehicles'], null | undefined>;
enum WidgetRole {
    IsLoading = 'IsLoading', // –î–µ—Ä–≥–∞–µ–º —Ä—É—á–∫—É
    HasError = 'HasError', // –û—à–∏–±–∫–∞ —Å –±—ç–∫–∞
    HasVehicles = 'HasVehicles', // –ï—Å—Ç—å –∫–æ—Ä–∞–±–ª–∏
    NotHasVehicles = 'NotHasVehicles', // –ú–∞—Å—Å–∏–≤ —Å –∫–æ—Ä–∞–±–ª—è–º–∏ –ø—É—Å—Ç–æ–π
}

// –§–∏–ª—å—Ç—Ä —Å–æ–∑–¥–∞–Ω –Ω–∞ —É—Ä–æ–≤–Ω–µ –≤–∏–¥–∂–µ—Ç–∞, —Ç–∞–∫ –∫–∞–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç <Filter /> –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å c –ª—é–±—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏,
// –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç–∏–ø—É Filters
const getFilteredData = ({ filters, data }: { filters: Filters; data: VehiclesList }) => {
    const level = Object.keys(filters.level);
    const type = Object.keys(filters.type);
    const nation = Object.keys(filters.nation);

    return data.filter((vehicle) => {
        // –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä –ø—É—Å—Ç–æ–π, —Ç–æ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –æ–Ω –ø—Ä–∏–º–µ–Ω–µ–Ω
        const hasLevel = level.length ? level.includes(String(vehicle?.level)) : true;
        const hasType = type.length ? type.includes(String(vehicle?.type?.name)) : true;
        const hasNation = nation.length ? nation.includes(String(vehicle?.nation?.name)) : true;

        return hasLevel && hasType && hasNation;
    });
};

// –í–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç –≤ —Ç–µ–∫—É—â–µ–º –≤–∏–¥–∂–µ—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ —Ä–æ–ª–∏
const calculateWidgetRole = ({
    isLoading,
    hasVehicles,
    hasError,
}: {
    isLoading: boolean;
    hasVehicles: boolean;
    hasError: boolean;
}) => {
    if (hasError) {
        return WidgetRole.HasError;
    }

    if (isLoading) {
        return WidgetRole.IsLoading;
    }

    if (hasVehicles) {
        return WidgetRole.HasVehicles;
    }

    return WidgetRole.NotHasVehicles;
};

export const CardsWithFilter: FC = () => {
    const { data, error, loading, refetch } = useGetVehiclesQuery();

    const vehiclesFromData = data?.vehicles ?? [];
    const vehiclesFromDataLength = vehiclesFromData.length;

    const { filtersFromParams: initFilters } = useFilterParams();
    const [isLoading, setIsLoading] = useState(loading);
    const [filters, setFilters] = useState<Filters>(initFilters);
    const [filteredVehicles, setFilteredVehicles] = useState<VehiclesList>([]);

    const {
        data: vehicles,
        handleClickToShowMore,
        handleClickToResetView,
    } = useShowMore({
        data: filteredVehicles,
        countOfView: COUNT_OF_VIEW_CARDS,
    });

    const canShowMoreButton = vehicles.length < filteredVehicles.length;
    const canShowResetViewButton = vehicles.length > COUNT_OF_VIEW_CARDS;
    const vehiclesSkeletons: string[] = Array(COUNT_OF_VIEW_CARDS).fill('');
    const widgetRole = calculateWidgetRole({
        isLoading,
        hasError: Boolean(error),
        hasVehicles: Boolean(vehicles.length),
    });

    const handleClickToRefetchData = () => {
        refetch();
    };

    useEffect(() => {
        if (vehiclesFromDataLength && !loading) {
            setIsLoading(false);
        }
    }, [loading, vehiclesFromDataLength]);

    useEffect(() => {
        if (vehiclesFromDataLength) {
            setFilteredVehicles(getFilteredData({ data: vehiclesFromData, filters }));
        }
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [filters, vehiclesFromDataLength]);

    if (widgetRole === WidgetRole.HasError) {
        return (
            <Container>
                <div className={clsx(styles.section, styles.section_theme_withError)}>
                    <p>–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ...</p>
                    <Button onClick={handleClickToRefetchData}>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑</Button>
                </div>
            </Container>
        );
    }

    return (
        <div className={styles.section}>
            <Container>
                <Row>
                    <Col size={{ mediaTablet: 4, mediaDesktop: 3 }}>
                        <Filter
                            filters={filters}
                            setFilters={setFilters}
                            className={styles.filter}
                        />
                    </Col>
                    <Col size={{ mediaTablet: 8, mediaDesktop: 9 }}>
                        <ul className={styles.filterCounts}>
                            <li>
                                <b>–í—Å–µ–≥–æ –∫–æ—Ä–∞–±–ª–µ–π</b>: {vehiclesFromDataLength}
                            </li>
                            <li>
                                <b>–ù–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∞–±–ª–µ–π</b>: {filteredVehicles.length}
                            </li>
                        </ul>
                        <Row>
                            {widgetRole === WidgetRole.IsLoading &&
                                vehiclesSkeletons.map((_, index) => (
                                    <Col
                                        size={{ mediaDesktop: 6, mediaDesktopLarge: 4 }}
                                        key={index}
                                    >
                                        <SkeletonCardVehicle className={styles.card} />
                                    </Col>
                                ))}

                            {widgetRole === WidgetRole.HasVehicles &&
                                vehicles.map((vehicle, index) => (
                                    <Col
                                        size={{ mediaDesktop: 6, mediaDesktopLarge: 4 }}
                                        key={index}
                                    >
                                        <CardVehicle {...vehicle} className={styles.card} />
                                    </Col>
                                ))}

                            {widgetRole === WidgetRole.NotHasVehicles && (
                                <Col className={styles.card}>–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üò¢</Col>
                            )}
                        </Row>
                        {Boolean(vehicles.length) && (
                            <ul className={styles.buttons}>
                                {canShowMoreButton && (
                                    <li>
                                        <Button color="blue" onClick={handleClickToShowMore}>
                                            –ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ {COUNT_OF_VIEW_CARDS} –∫–æ—Ä–∞–±–ª–µ–π
                                        </Button>
                                    </li>
                                )}
                                {canShowResetViewButton && (
                                    <li>
                                        <Button color="red" onClick={handleClickToResetView}>
                                            –°–∫—Ä—ã—Ç—å –≤—Å–µ
                                        </Button>
                                    </li>
                                )}
                            </ul>
                        )}
                    </Col>
                </Row>
            </Container>
        </div>
    );
};
